import java.util.*;

public class Hello {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int r = sc.nextInt();
        int c = sc.nextInt();
        int[][] arr1 = new int[r][c];

        // Reading the 2D array input
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                arr1[i][j] = sc.nextInt();
            }
        }

        int n = sc.nextInt();

        // Initializing spiral traversal pointers and direction
        int top = 0;
        int bottom = r - 1;
        int left = 0;
        int right = c - 1;
        int[] ref1 = new int[r * c];
        int direction = 0; // 0 - right, 1 - down, 2 - left, 3 - up
        int ctr = 0;

        // Changes in Spiral Traversal
        // Use correct indices for row and column during traversal
        while (top <= bottom && left <= right) {
            if (direction == 0) { // Traverse from left to right
                for (int k = left; k <= right; k++) {
                    ref1[ctr++] = arr1[top][k];
                }
                top++;
            } else if (direction == 1) { // Traverse from top to bottom
                for (int g = top; g <= bottom; g++) {
                    ref1[ctr++] = arr1[g][right];
                }
                right--;
            } else if (direction == 2) { // Traverse from right to left
                for (int t = right; t >= left; t--) {
                    ref1[ctr++] = arr1[bottom][t];
                }
                bottom--;
            } else if (direction == 3) { // Traverse from bottom to top
                for (int s = bottom; s >= top; s--) {
                    ref1[ctr++] = arr1[s][left];
                }
                left++;
            }
            direction = (direction + 1) % 4;
        }

        // Changes in Shifting Logic
        // Correctly shift array by 'n' positions using reverse method
        n = n % ref1.length; // In case n is greater than the length of ref1
        reverse(ref1, 0, ref1.length - 1);
        reverse(ref1, 0, n - 1);
        reverse(ref1, n, ref1.length - 1);

        // Changes in Printing Logic
        // Print the shifted array in the original matrix form
        int index = 0;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                System.out.print(ref1[index++] + " ");
            }
            System.out.println();
        }
    }

    // Helper method to reverse parts of the array
    public static void reverse(int[] arr, int start, int end) {
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
}
